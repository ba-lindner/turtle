" +feature types
" +feature events
" +feature multithreading

event mouse()
  path advance_step
endevent

event key()
  path advance_step
endevent

path advance_step
  add 1 to @step
  if @step = 1 then
    path draw_lexer
  endif
  if @step = 2 then
    path draw_parser
  endif
  if @step = 3 then
    path draw_itp
  endif
  if @step = 4 then
    path draw_comp
  endif
  if @step = 5 then
    path draw_debug
  endif
  if @step = 6 then
    store 0 in @delay
    clear
    path draw_lexer
    path draw_parser
    path draw_comp
    path draw_debug
    store 5 in @delay
    path draw_itp_2
  endif
  if @step = 7 then
    path draw_shell
    store true in @finished
  endif
endpath

"##############################################################################
"  Helper Functions
"##############################################################################

path draw(len: num)
  do len times
    walk 0.1
  done
endpath

path sq(with_conn: bool)
  if with_conn then
    path draw(@conn_len)
  endif
  split sq_part(90)
  path sq_part(-90)
  direction 0
  jump back @sq_len * 0.05
endpath

path sq_part(dir: num)
  turn right dir
  path draw(@sq_len / 2)
  turn left dir
  path draw(@sq_len)
  turn left dir
  path draw(@sq_len / 2)
endpath

" radius, segments, part, inverted
path circ(r: num, n: num, p: num, inv: bool)
  mark
  jump r

  store 180-360/n in beta
  store 2*(2*@pi*r/2)/n in a
  store n * p / 360 in max
  store 1 - 2 * num(inv) in fac

  turn left (180-beta/2) * fac
  counter x from 0 to max do
    walk a
    turn left (180-beta) * fac
  done
  jump mark
endpath

"##############################################################################
"  Components
"##############################################################################

path draw_lexer
  jump home
  jump back 0.1 * (@sq_len * 1.5 + @conn_len)
  path sq(false)
  jump back 1
  turn right 90
  jump back 1.5
  path draw(30)
  turn left 90
  path draw(20)
endpath

path draw_parser
  jump home
  jump back 0.1 * (@sq_len * 0.5 + @conn_len)
  path sq(true)
  jump back 0.5
  turn left 90
  jump back 1.5
  path draw(30)
  turn right 90
  path draw(5)
  turn right 90
  jump 3/4
  direction 90
  path circ(3/4, 30, 180, true)
  direction 270
  jump 3/4
  turn right 90
  path draw(5)
endpath

path draw_itp
  jump home
  jump 0.05 * @sq_len
  path sq(true)
  direction 270
  jump back 1.5
  path draw(30)
  jump back 3
  turn left 90
  jump back 0.5
  path draw(10)
  jump back 1
  turn right 90
  jump 3
  turn left 90
  path draw(10)
endpath

path draw_comp
  jump home
  direction 45
  jump @sq_len * 0.05 * sqrt(2)
  path draw(@conn_len * sqrt(2))
  turn left 45
  jump @sq_len * 0.05
  direction 0
  path sq(false)
  direction 45
  path circ(1.5, 45, 270, false)
endpath

path draw_debug
  jump home
  direction -45
  jump @sq_len * 0.05 * sqrt(2)
  path draw(@conn_len * sqrt(2))
  turn right 45
  jump @sq_len * 0.05
  direction 0
  path sq(false)
  jump back 1
  turn left 90
  jump back 1.5
  path draw(30)
  turn right 90
  path draw(5)
  turn right 90
  jump 1.5
  direction 90
  path circ(1.5, 30, 180, true)
  jump back 1.5
  turn left 90
  path draw(5)
endpath

path draw_itp_2
  jump home
  jump 5.5
  turn right 90
  jump 10.5
  path draw(25)
  turn left 90
  path draw(25)
  turn left 90
  path draw(25)
  turn left 90
  jump 1.25
  turn left 90
  jump 0.5
  path draw(15)
endpath

path draw_shell
  jump home
  jump 8
  turn right 90
  jump 13
  turn left 90
  path draw(25)
  turn left 90
  path draw(25)
  turn left 90
  jump 1.25
  turn left 90
  jump 0.875
  direction 45
  path circ(0.375, 40, 225, false)
  direction 90
  jump back 0.75
  path circ(0.375, 40, 225, true)
endpath

"##############################################################################
"  main
"##############################################################################

begin
  store 5 in @delay
  store 50 in @sq_len
  store 30 in @conn_len

  store false in @finished

  " wait loop
  while not @finished do wait done

  stop
end